
@inproceedings{gadts,
 author = {Peyton Jones, Simon and Vytiniotis, Dimitrios and Weirich, Stephanie and Washburn, Geoffrey},
 title = {Simple unification-based type inference for GADTs},
 booktitle = {Proceedings of the ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP'06},
 year = {2006},
 month = {April},
 publisher = {ACM Press},
 url = {https://www.microsoft.com/en-us/research/publication/simple-unification-based-type-inference-for-gadts/},
 pages = {50--61},
}

@inproceedings{Siek06gradualtyping,
    author = {Jeremy G. Siek and Walid Taha},
    title = {Gradual Typing for Functional Languages},
    booktitle = {Scheme and functional programming workshop},
    year = {2006},
    pages = {81--92},
}

@misc{funWithTypeFunctionsKiselyov09,
 author = {Kiselyov, Oleg and Peyton Jones, Simon and Shan, Chung-chieh},
 title = {Fun with type functions},
 year = {2009},
 month = {April},
 url = {https://www.microsoft.com/en-us/research/publication/fun-type-functions/},
 edition = {Presented at Tony Hoare's 75th birthday celebration, Cambridge, 17 April 2009.},
}

@article{gbeta,
 title={gbeta - a Language with Virtual Attributes, Block Structure, and Propagating, Dynamic Inheritance},
 volume={29},
 url={https://tidsskrift.dk/daimipb/article/view/7654},
 DOI={10.7146/dpb.v29i549.7654},
 number={549},
 journal={DAIMI Report Series},
 author={Ernst, Erik},
 year={2000},
 month={May}
}

@misc{Wadler98ExpressionProblem,
 author={Wadler, Philip},
 title={The Expression Problem},
 url={https://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt},
 year={1998},
 month={November},
}

@inproceedings{WangOliveira16ExpressionProblem,
 author = {Wang, Yanlin and Oliveira, Bruno C. d. S.},
 title = {The Expression Problem, Trivially!},
 booktitle = {Proceedings of the 15th International Conference on Modularity},
 series = {MODULARITY 2016},
 year = {2016},
 isbn = {978-1-4503-3995-7},
 location = {M\&\#225;laga, Spain},
 pages = {37--41},
 numpages = {5},
 url = {http://doi.acm.org/10.1145/2889443.2889448},
 doi = {10.1145/2889443.2889448},
 acmid = {2889448},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Design patterns, Expression problem, Extensibility, Modularity, Object-oriented programming},
}

@inproceedings{LeijenMeijer99,
 author = {Leijen, Daan and Erik, Meijer},
 title = {Domain-specific embedded compilers},
 booktitle = {In Proceedings of the 2nd Conference on Domain-Specific Languages},
 pages = {109--122},
 location = {Berkeley, CA},
 month = {October},
 year = {1999},
 publisher = {USENIX Association},
}

@techreport{cheneyHinzePhantomTypes,
 author = {Cheney, James and Hinze, Ralf},
 title={First-Class Phantom Types},
 number={TR2003-1901},
 institution={Cornell University},
 month={July},
 year = {2003},
}

@inproceedings{olivieraDisjointIntersectionTypes,
 author = {Oliveira, Bruno C. d. S. and Shi, Zhiyuan and Alpuim, Jo\~{a}o},
 title = {Disjoint Intersection Types},
 booktitle = {Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP 2016},
 year = {2016},
 isbn = {978-1-4503-4219-3},
 location = {Nara, Japan},
 pages = {364--377},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/2951913.2951945},
 doi = {10.1145/2951913.2951945},
 acmid = {2951945},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Intersection Types, Type System},
}

@InProceedings{scalaIndependentlyExtensible,
  author =       {Martin Odersky and Matthias Zenger},
  title =        {Independently Extensible Solutions to the Expression Problem},
  booktitle =    {Proc. FOOL 12},
  year =         2005,
  month =        jan,
  url =         {http://homepages.inf.ed.ac.uk/wadler/fool}
}

@inproceedings{Myers2006SoftwareCW,
  title={Software Composition with Multiple Nested Inheritance},
  author={Andrew C. Myers},
  year={2006}
}

@inproceedings{Cohen2006JTLTJ,
  title={JTL: the Java tools language},
  author={Tal Cohen and Joseph Gil and Itay Maman},
  booktitle={OOPSLA},
  year={2006}
}

@inproceedings{Ponz2015a,
	Author = {Luca Ponzanelli and Andrea Mocci and Michele Lanza},
	Title = {{StORMeD: Stack Overflow ready made data}},
	Keywords = {pub-iene, proj-sosya},
	Booktitle = {Proceedings of MSR 2015 (12th Working Conference on Mining Software Repositories)},
	Pages = {to be published},
	Publisher = {ACM Press},
	Year = {2015},}

@inproceedings{Moon2001a,
	author = {Leon Moonen},
	title = {Generating Robust Parsers using Island Grammars},
	booktitle = {Proceedings of WCRE 2001 (8th Working Conference on Reverse Engineering)},
	year = {2001},
 	pages = {13-22},
 	publisher = {IEEE CS}}

@inproceedings{Bacc2011f,
	Author = {Alberto Bacchelli and Anthony Cleve and Michele Lanza and Andrea Mocci},
	Booktitle = {Proceedings of ASE 2011 (26th IEEE/ACM International Conference On Automated Software Engineering)},
	Keywords = {pub-iene, proj-sosya},
	Pages = {476--479},
	Title = {Extracting Structured Data from Natural Language Documents with Island Parsing},
	Year = {2011}
}	

@article{boa-github,
author = {Dyer, Robert and Nguyen, Hoan and Rajan, H and Nguyen, T},
year = {2015},
month = {01},
pages = {593-621},
title = {Boa: An Enabling Language and Infrastructure for Ultra-Large-Scale MSR Studies},
doi = {10.1016/B978-0-12-411519-4.00020-3}
}

@misc{zhitnitskyTop10Exception2016,
  title = {The {{Top}} 10 {{Exception Types}} in {{Production Java Applications}} - {{Based}} on {{1B Events}}},
  abstract = {The Pareto logging principle: 97\% of logged error statements are caused by 3\% of unique errors},
  language = {en-US},
  journal = {OverOps Blog},
  howpublished = {https://blog.takipi.com/the-top-10-exceptions-types-in-production-java-applications-based-on-1b-events/},
  author = {Zhitnitsky, Alex},
  month = jun,
  year = {2016},
  file = {/Users/luigi/work/zotero/storage/LCH5YSXD/the-top-10-exceptions-types-in-production-java-applications-based-on-1b-events.html}
}

@article{sandoz-personal-communication,
  title = {Personal Communication},
  author = {Sandoz, Paul},
  year = {2015}
}

@article{psandoz14,
  title = {Safety {{Not Guaranteed}}: Sun.Misc.{{Unsafe}} and the Quest for Safe Alternatives},
  author = {Sandoz, Paul},
  year = {2014},
  note = {Oracle Inc. [Online; accessed 29-January-2015]}
}

@article{jep169,
  title = {{{JEP}} 169: {{Value Objects}}},
  author = {Rose, John},
  year = {2012},
  url = {https://openjdk.java.net/jeps/169}
}

@article{jep218,
  title = {{{JEP}} 218: {{Generics over Primitive Types}}},
  author = {Goetz, Brian},
  year = {2014},
  url = {https://openjdk.java.net/jeps/218}
}

@article{jep300,
  title = {{{JEP}} 300: {{Augment Use-Site Variance with Declaration-Site Defaults}}},
  author = {Smith, Dan},
  year = {2014},
  url = {https://openjdk.java.net/jeps/300}
}

@article{jep193,
  title = {{{JEP}} 193: {{Variable Handles}}},
  author = {Lea, Doug},
  year = {2014},
  url = {https://openjdk.java.net/jeps/193}
}

@article{jep189,
  title = {{{JEP}} 189: {{Shenandoah}}: {{An Ultra}}-{{Low}}-{{Pause}}-{{Time Garbage Collector}}},
  author = {Christine H. Flood, Roman Kennke},
  year = {2014},
  url = {https://openjdk.java.net/jeps/189}
}

@article{jep191,
  title = {{{JEP}} 191: {{Foreign Function Interface}}},
  author = {Nutter, Charles Oliver},
  year = {2014},
  url = {https://openjdk.java.net/jeps/191}
}

@article{jep325,
  title = {{{JEP}} 325: {{Switch Expressions (Preview)}}},
  author = {Goetz, Brian},
  year = {2017},
  url = {https://openjdk.java.net/jeps/325}
}

@article{jep354,
  title = {{{JEP}} 354: {{Switch Expressions}}},
  author = {Bierman, Gavin},
  year = {2019},
  url = {https://openjdk.java.net/jeps/354}
}

@article{jep305,
  title = {{{JEP}} 305: {{Pattern Matching for \code{instanceof} (Preview)}}},
  author = {Goetz, Brian},
  year = {2017},
  url = {https://openjdk.java.net/jeps/305}
}

@article{valuetypes,
  title = {State of the {{Values}}},
  author = {Rose, John and Goetz, Brian and Steele, Guy},
  year = {2014},
  url = {https://cr.openjdk.java.net/~jrose/values/values-0.html}
}

@article{arrays20,
  title = {Arrays 2.0},
  author = {Rose, John R.},
  year = {2012}
}

@article{layouts,
  title = {Project {{Sumatra}}},
  author = {{OpenJDK}},
  year = {2013},
  url = {https://openjdk.java.net/projects/sumatra/}
}

@article{panama,
  title = {The Isthmus in the {{VM}}},
  author = {Rose, John R.},
  year = {2014},
  url = {https://cr.openjdk.java.net/~jrose/panama/isthmus-in-the-vm-2014.html}
}

@article{pawlak:hal-01169705,
  TITLE = {{Spoon: A Library for Implementing Analyses and Transformations of Java Source Code}},
  AUTHOR = {Pawlak, Renaud and Monperrus, Martin and Petitprez, Nicolas and Noguera, Carlos and Seinturier, Lionel},
  JOURNAL = {{Software: Practice and Experience}},
  PUBLISHER = {{Wiley-Blackwell}},
  PAGES = {1155-1179},
  VOLUME = {46},
  URL = {https://hal.archives-ouvertes.fr/hal-01078532/document},
  YEAR = {2015},
  doi = {10.1002/spe.2346},
}

@inproceedings{Ekman:2007:JEJ:1297027.1297029,
 author = {Ekman, Torbj\"{o}rn and Hedin, G\"{o}rel},
 title = {The jastadd extensible java compiler},
 booktitle = {Proceedings of the 22nd annual ACM SIGPLAN conference on Object-oriented programming systems and applications},
 series = {OOPSLA '07},
 year = {2007},
 isbn = {978-1-59593-786-5},
 location = {Montreal, Quebec, Canada},
 pages = {1--18},
 numpages = {18},
 url = {http://doi.acm.org/10.1145/1297027.1297029},
 doi = {10.1145/1297027.1297029},
 acmid = {1297029},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {OOP, compilers, declarative frameworks, extensibility, java, modularity},
}

@INPROCEEDINGS{Bubak00creatingjava,
    author = {Marian Bubak and Dawid Kurzyniec},
    title = {Creating Java to native code interfaces with Janet extension},
    booktitle = {In Proceedings of the First Worldwide SGI Usersâ€™ Conference},
    year = {2000},
    pages = {283--294}
}

@inproceedings{collective2018,
  author = {Ganesha Upadhyaya and Hridesh Rajan},
  title = {Collective Program Analysis},
  booktitle = {ICSE'18: The 40th International Conference on Software Engineering},
  location = {Gothenberg, Sweden},
  month = {May 27-June 3, 2018},
  year = {2018},
  entrysubtype = {conference},
  abstract = {
    Popularity of data-driven software engineering has led to an increasing demand
    on the infrastructures to support efficient execution of tasks that require
    deeper source code analysis. While task optimization and parallelization are the
    adopted solutions, other research directions are less explored.
    We present collective program analysis (CPA), a technique for
    scaling large scale source code analysis by leveraging analysis specific similarity.
    Analysis specific similarity is about, whether two or more programs can be
    considered similar for a given analysis.
    The key idea of collective program analysis is to cluster programs based on
    analysis specific similarity, such that running the analysis on one candidate
    in each cluster is sufficient to produce the result for others.
    For determining the analysis specific similarity and for clustering
    analysis-equivalent programs, we use a sparse representation and a
    canonical labeling scheme.
    A sparse representation contains only the parts that are relevant for the
    analysis and the canonical labeling helps with finding isomorphic sparse representations.
    In a nutshell, two or more programs with same sparse representation must behave
    similarly for the given analysis.
    Our evaluation shows that for a variety of source code analysis tasks when run
    on a large dataset of programs, our technique is able to achieve substantial
    reduction in the analysis times; on average 69% when compared to baseline and
    on average 36% when compared to a prior technique.
    We also show that there exists a large amount of analysis-equivalent programs in
    large datasets for variety of analysis.
  }
}

@inproceedings{Ramu:2018:HTE:3183440.3195033,
 author = {Ramu, Ramanathan and Upadhyaya, Ganesha and Nguyen, Hoan A and Rajan, Hridesh},
 title = {Hybrid Traversal: Efficient Source Code Analysis at Scale},
 booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
 series = {ICSE '18},
 year = {2018},
 isbn = {978-1-4503-5663-3},
 location = {Gothenburg, Sweden},
 pages = {412--413},
 numpages = {2},
 url = {http://doi.acm.org/10.1145/3183440.3195033},
 doi = {10.1145/3183440.3195033},
 acmid = {3195033},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{ReliableQA2018,
  author = {Tianyi Zhang and Ganesha Upadhyaya and Anastasia Reinhardt and Hridesh Rajan and Miryung Kim},
  title = {Are Code Examples on an Online Q\&A Forum Reliable? A Study of API Misuse on Stack Overflow},
  booktitle = {ICSE'18: The 40th International Conference on Software Engineering},
  location = {Gothenberg, Sweden},
  month = {May 27-June 3, 2018},
  year = {2018},
  entrysubtype = {conference},
  abstract = {
   Programmers often consult an online Q\&A forum such as Stack Overflow to learn new APIs. 
   This paper presents an empirical study on the prevalence and severity of API misuse on Stack Overflow. 
   To reduce manual assessment effort, we design Maple, an API usage mining approach 
   that extracts patterns from over 380K Java repositories on GitHub and subsequently 
   reports potential API usage violations in Stack Overflow posts.
   We analyze 217,818 Stack Overflow posts using Maple and find that around 31% of them 
   have potential API usage violations that may produce the symptoms such as program 
   crashes and resource leaks. Such API misuse is caused by three main 
   reasons---missing control constructs, missing or incorrect order of API calls, and 
   incorrect guard conditions. Even the posts that are accepted as correct answers or 
   upvoted by other programmers are not necessarily more reliable than other posts in 
   terms of API misuse. This study result calls for a new human-in-the-loop approach 
   to augment Stack Overflow code snippets and help the user consider better or 
   alternative API usage.
  }
}

@inproceedings{maddox18,
  author = {Maddox, Jackson and Long, Yuheng and Rajan, Hridesh},
  title = {Large-scale Study of Substitutability in the Presence of Effects},
  booktitle = {ESEC/FSE'18: The ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE)},
  series = {ESEC/FSE 2018},
  month = {November},
  year = {2018},
  entrysubtype = {conference},
  abstract = {
    A majority of modern software is constructed using languages that
    compute by producing side-effects such as reading/writing from/to
    files, throwing exceptions, acquiring locks, etc. To understand a
    piece of software, e.g. a class, it is important for a developer to
    understand its side-effects. Similarly, to replace a class with another,
    it is important to understand whether the replacement is a safe
    substitution for the former in terms of its behavior, a property
    known as substitutability, because mismatch may lead to bugs. The
    problem is especially severe for superclass-subclass pairs since
    at runtime an instance of the subclass may be used in the client
    code where a superclass is mentioned. Despite the importance of
    this property, we do not yet know whether substitutability w.r.t.
    effects between subclass and superclass is preserved in the wild,
    and if not what sorts of substitutability violations are common and
    what is the impact of such violations. This paper conducts a large
    scale study on over 20 million Java classes, in order to compare the
    effects of the methods of subclasses and superclasses in practice.
    Our comprehensive study considers the exception, synchronization,
    I/O, and method call effects. It reveals several interesting findings
    and provides useful guidance for bug detection, testing, and code
    smell detection tool design.
  }
}