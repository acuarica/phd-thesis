
#+TITLE: Ph.D. Thesis
#+STARTUP: logdrawer
#+TODO: TODO(t!) ONHOLD(h!) | DONE(d@) CANCELED(c@) WONTDO(w@)

* TODOs
** DONE Sampling
CLOSED: [2019-04-25 Thu 21:17]
N = Total number of casts to analyze: 9,030,852
K = Total number of casts of the least used pattern
n = Sample size to select
k = Times we saw the least used cast from the sample: 0 meaning we do not see it in our sample
https://keisan.casio.com/exec/system/1180573201
** TODO Talk about reflection as a way to /escape/ the type system, then talk about casting as a subset of reflection
** TODO Add discussion from <https://martinfowler.com/bliki/DynamicTyping.html>
** TODO Discuss "Static Typing of Complex Presence Constraints in Interfaces" \cite{oostvogelsStaticTypingComplex2018a}
** TODO Source of information for cast success
*** Configuration files
*** Libraries
*** More complex analysis
** TODO What does the compiler need to know to assert that a cast won't fail at runtime?
** TODO Include type system soundness discussion for thesis
** DONE Find examples where ~instanceof~ is right and wrong
CLOSED: [2019-04-25 Thu 21:06]
** DONE Quantify patterns, Qualitative data
CLOSED: [2019-04-29 Mon 13:55]
** DONE Expand comment on usages of C ~goto~ s in GitHub (similar to our cast study)
CLOSED: [2019-04-29 Mon 02:30]
** TODO What conclusions did they draw on JNI usage?
** TODO Expand discussion on static vs. dynamic analyses for these kinds of studies
** DONE How many JEPs have been adopted since 2015?
CLOSED: [2019-04-29 Mon 00:34]
** TODO Discuss aspects of type systems
*** Static vs. Dynamic
*** Staging-time/Compile-time/Link-time/Load-time/Run-time
** DONE Preliminary discussion about `checkcast` and `instanceof` bytecodes
CLOSED: [2019-04-25 Thu 17:03]
** DONE Comment about why source code is necessary: upcasts are lost during compilation
CLOSED: [2019-04-29 Mon 13:55]
** TODO Add Code Recommenders Systems Codota/Kite https://www.codota.com/
** CANCELED Patterns discussion `Selection`: Implicits in Scala
CLOSED: [2019-04-29 Mon 13:56]
** TODO Pattern discussion `Pattern Matching`: Jurgen Vinju paper <http://homepages.cwi.nl/~storm/publications/visitor.pdf>
** CANCELED Methodology should be reproducible by other people leading to the same results
CLOSED: [2019-04-29 Mon 13:57]
** CANCELED Cast study coverage w/QL
CLOSED: [2019-04-25 Thu 21:05]
** DONE Make a case for the complexity of Engineering for compiling/dependencies for static analysis
CLOSED: [2019-04-29 Mon 13:58]
** DONE Expand on study about the source of exceptions
CLOSED: [2019-04-25 Thu 20:53]
Showing CCE being a problem for developers
** TODO Pattern Dynamic Proxy: Paper "Static Analysis of Java Dynamic Proxies"
** TODO Literature Review: Article "Static Typing Where Possible, Dynamic Typing When Needed: The End of the Cold War Between Programming Languages"
** DONE Discussion about *strong typing* in "On understanding types, data abstraction, and polymorphism"
CLOSED: [2019-04-29 Mon 16:23]
** WONTDO Discuss why `classInstanceValue` (square/leakcanary) is not analyzable
CLOSED: [2019-04-25 Thu 20:55]
Deserialization pattern
** DONE Discuss about `findViewById`
CLOSED: [2019-04-25 Thu 20:56]
Partial solutions in other languages
** TODO Cast to null (SelectionOverload)
Sometimes they are not redundant.
For one case, find out in the history why it is redundant.
** DONE Cast int to long: Invocation context
CLOSED: [2019-04-25 Thu 21:11]
https://lgtm.com/projects/g/apache/commons-io/snapshot/dist-41210059-1524814812150/files/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java?#L1048

** DONE Cite Unsafe in Related Work.
CLOSED: [2019-04-28 Sun 17:07]
** DONE Cite Pierce in the introduction of the casts chapter
** DONE Thanks Max for the contributions
** DONE Test/Gen/App
** CANCELED Autodetection of patterns
CLOSED: [2019-04-25 Thu 20:56]
** DONE Split UseRawType/RemoveWildcard
CLOSED: [2019-04-25 Thu 19:29]
** DONE Statistics/Broken links: More casts until we reach 5000
CLOSED: [2019-04-25 Thu 19:29]
** DONE More examples/Longer (not cut)
CLOSED: [2019-04-25 Thu 19:29]
** WONTDO Venn Diagram by Groups: UpSet plot
CLOSED: [2019-04-25 Thu 21:00]
** TODO Grouping/Tagging/Patterns+Subpatterns table for casts patterns
*** DONE Type system changes
CLOSED: [2019-04-29 Mon 14:54]
*** DONE Guarded/Unguarded
CLOSED: [2019-04-26 Fri 00:17]
*** DONE Audiences: Developers/Designers/Tool Builders
CLOSED: [2019-04-26 Fri 00:17]
*** TODO Languages Features: Generics/Autoboxing/Primitives/Unchecked/Throws
**** More prevalent in: App/Test/Gen
**** Android/API related
**** Need to talk about the approach to analysis.
Some very local, some very similar to others.
Others require very local analysis.
Some even require looking at the project history.
**** Type Erasure
**** "Java Type System hacking/kludge"
*** DONE Boxing/Unboxing
CLOSED: [2019-04-29 Mon 15:49]
**** Cast to force autobox at particular type
**** Narrowing cast from int literal to char/short/byte for call
*** DONE Could the cast be avoided?
CLOSED: [2019-04-26 Fri 00:17]
*** TODO Type erasure, Erased category
*** TODO Levels of locality
Go beyond the aplication to detect a pattern: Class/Method.
** TODO Tie "unchecked" casts with blame/gradual typing
** CANCELED AccessPrivateField: Special mention in SelectOverload
CLOSED: [2019-04-25 Thu 21:00]
** DONE SoleClassImplementation: Use a better example: ClassImpl implements Inteface
CLOSED: [2019-04-25 Thu 20:59]
** DONE Example CreateByClassLiteral to GetByClassLiteral
CLOSED: [2019-04-25 Thu 21:01]
** DONE Typesafe dictionary/stack for discussion for =Stash=, =OperandStack= pattern
CLOSED: [2019-04-29 Mon 16:00]
*** Happy (Haskell parser) unsafe stack easier and faster
*** Implementation w/HList?
*** Second example it is correct because of grammar construction
** DONE TypeTag pattern instance
CLOSED: [2019-04-25 Thu 21:02]
Last example, check if ~args~ is always ~Object[]~.
TypeTag think about reclassifiyng into ?LikelyBug.
** CANCELED Code Smell into Avoidable?: Removed groups
CLOSED: [2019-04-25 Thu 21:13]
** CANCELED Type erasure, Erased category: Removed groups
CLOSED: [2019-04-25 Thu 21:13]
** DONE Typecase on rethrow because of ~throws~ declaration
CLOSED: [2019-04-25 Thu 19:31]
** DONE Logger is a redundant cast: Actually /KnownReturnType/
CLOSED: [2019-04-25 Thu 19:30]
** DONE Threats of validity
CLOSED: [2019-04-29 Mon 14:23]
How to handle bias?
** DONE Future Work
CLOSED: [2019-04-29 Mon 14:10]
QL queries, what queries could be expresses in QL.
Patterns as training set and then use ML, code equality.
** TODO Address Antonio's comment on casting is not circumventing the static type system: Dynamically recovery information
** TODO Address internal committee comments on the proposal
*** Antonio's
**** My first and perhaps most important objections are on the premise of
the main research questions, namely that casting and unsafe are
mechanism used to circumvent the type system.
**** In particular, I would argue that a down-cast is not a way to
circumvent the type system, but rather a perfectly clear and
straightforward way to work /within/ the type system.
**** The /Unsafe/ mechanism can do a lot more than messing around with types,
so I wonder in what way the use of /Unsafe/ can be
characterized as a way to circumvent the type system.
Of the 14 usage patterns listed in Table 3.1, only two have something to do with the
type system, namely throwing undeclared exceptions and updating
/final/ fields -- and those don't seem to be significant breaches of
the type systems anyway.
**** The examples listed in Section 4.1 don't seem to indicate problems with
the type system.
In other words, here ClassCast exceptions
not fundamentally different from, say, NullPointer exceptions.
**** The percentage of /indirect/ use of /Unsafe/ is not am indication of
the prevalence of bugs, let alone the prevalence of bugs that are
actually due to the use of /Unsafe/.
Perhaps you should look into that.
**** It seems to me that you are focusing on a syntactic or anyway
low-level aspect of the use of a programming language.
You should instead focus on the /semantics/ of a particular use of
a language feature.
For example, you could ask, how often and in what cases do
programmers use bound checks (in using arrays), and are those bad,
perhaps because they make the code less readable, or they are
unnecessary, because the checks are provably unnecessary.
**** You say that performance is the main motivation for the uses of Unsafe.
I would argue that the main motivation is instead another typical one:
supporting various forms of application instrumentation or
other application-independent services (e.g., a checkpointing library).
**** DONE You say you focus on high-impact uses/features,
CLOSED: [2019-04-29 Mon 15:06]
but you seem to only use static analysis.
Have you thought about measuring how often
/Unsafe/ is actually used, meaning /dynamically/? 
Another, perhaps more interesting question is how often those uses are
identified as the root cause of failures.

*** ONHOLD Gabriele's
**** Chapter 3, only 1% of the projects (817 out of 86k) use the Unsafe API,
but they use it a lot (48k usages). Why?
**** Is the usage of the Unsafe API a form of technical debt?
If yes, do you expect developers to refactor the code using the Usafe API?
**** DONE Comment on the limitation of the study in Chapter 3
CLOSED: [2019-04-29 Mon 14:28]
related to the selection of the subject systems (libraries only)
**** DONE Clarify the manual process used to define the taxonomy in Chapter 3
CLOSED: [2019-04-29 Mon 09:59]
(e.g., what is the confidence level/interval of the manually analyzed sample?
how many evaluators have been involved in the process?
how did you solve conflicts between evaluators? etc.)
**** It would be interesting to look not only to commits fixing a ClassCastException,
but also in code review repositories/issue trackers to analyze the developers’
discussion and extract the rationale behind some implementation choices.
**** Consider using the explicit link existing in GitHub between commits and issues
to only analyze bug-fixing commits related to ClassCastException
(and automatically exclude commits unrelated to bug-fixing activities).
**** Look at the 2019 MSR challenge dataset.
It reports discussions on Stack Overflow including their code snippets linked to projects in GitHub.
You can see whether a given code snippet in SO has been reused in GitHub projects and
this can give you some hints on why developers use the Unsafe API or some type cast patterns.

** DONE Literature Review: Add to introduction
CLOSED: [2019-04-27 Sat 15:04]
Users/Compilers Java/Scala generated bytecode

But there is more than empirical studies at the source code level.
A machine instruction set is effectively another kind of language.
Therefore, its design can be affected by how compilers generate machine code.
Several studies targeted the \jvm{}~\cite{collberg_empirical_2007,odonoghue_bigram_2002,antonioli_analysis_1998};
while~\cite{cook_empirical_1989} did a similar study for \lilith{} in the past.
** TODO Address completely Antonio's & Gabriele's comments on the proposal
** DONE Remove StackOverflow subsection from Unsafe
CLOSED: [2019-05-01 Wed 16:30]
*** Should this be in the thesis?
*** It's not your work
*** Cite Unsafe paper instead of subsection
*** Whenever StackOverflow comments happens
** TODO Include QL snippets in an /Appendix/
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 22:56]
:END:
*** Justify why I did it manually
*** Introduction on QL
*** OperandStack example: Method names, difficult to came up with a QL query
*** QL queries are subset of manual detection
*** Quite impractical, how to recognize a stack?
** TODO Conclusions and Introduction need to be bigger
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 22:57]
:END:
*** My learning in these 5 years
*** Take home for me as a PhD student, see it as a dissertation
*** Boa or QL
*** JNIF/ASM
*** /Lessons Learnt/ section in conclusions
** TODO Literature Review
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 22:57]
:END:
*** Add a table to help visualize the chapter
*** Like an overview
** TODO Qualitative/Quantitative Research
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 22:57]
:END:
*** What methodology did I use?
*** Add this to the conclusion
*** How am I going to answer the RQ?
*** Small description after the RQ presentation
*** Relate to repository mining in the introduction
** TODO When the answers to the RQs are good enough?
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 22:57]
:END:
** TODO Conclusions in each chapter (also in Literature Review)
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 22:57]
:END:
*** Each conclusion should bridge to the next chapter
*** In Literature review: finish the chapter motivating the next 2 chapter
*** Conclusion in Literature Review
*** /There is a hole, I'm going to fill it, it's important/
** DONE Chapter and Section capitalized
CLOSED: [2019-04-30 Tue 21:01]
*** Look introduction in JNIF
** TODO Unsafe and Casts chapter title renamed
*** Under the thesis introduction
** DONE Underfull & overfull boxes in PDF
CLOSED: [2019-04-30 Tue 20:58]
** ONHOLD Send email remainder to Matthias&Nate to read it
:LOGBOOK:
- State "ONHOLD"     from "TODO"       [2019-05-01 Wed 19:23]
- State "TODO"       from              [2019-05-01 Wed 19:23]
:END:
*** Friday after work
** DONE Send email to committee to announce the thesis is on June 6
CLOSED: [2019-05-01 Wed 19:22]
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-05-01 Wed 19:22] \\
  Email sent.
- State "TODO"       from              [2019-05-01 Wed 19:21]
:END:
*** Ask to Rajan & Jan to confirm if they are going to be in Lugano
** TODO Introduction
*** More on advantanges of static typing
*** More on dangers of unsafe/casting
*** Also reflection/native code
*** Make subsection /Outline/ to introduce rest of thesis
** TODO Literature Review
*** There are many Java parsers, why only JavaParser
** TODO Introduction casts chapter based on paper submitted
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 22:55]
:END:
** TODO Discuss generated and test code casts, for instance
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 22:54]
:END:
*** Stash/Equals:instanceof patterns for generated code
*** Factory patterns for test code
*** Why so many?
** TODO OperandStack find a non-parsing example
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 22:54]
:END:
** TODO Toward QL queries for some automatic detection of patterns?
:LOGBOOK:
- State "TODO"       from              [2019-05-02 Thu 01:41]
:END:
** DONE Why JNIF relevant to the thesis?
CLOSED: [2019-05-01 Wed 19:22]
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-05-01 Wed 19:22] \\
  Added comments in chapters 3 & 4.
- State "TODO"       from              [2019-05-01 Wed 19:22]
:END:
*** Comments on both chapters 3 & 4
*** Used for first attempts to conduct the studies
** TODO Relate ~null~ as theoretical point of view in the TAPL book
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 20:11]
:END:
** TODO Featherweight Java is sound unless you use cast
:LOGBOOK:
- State "TODO"       from              [2019-05-01 Wed 20:11]
:END:
*** Use as a motivation
*** Cast provides a bridge between compile-time and run-time checking
** WONTDO ExceptionSoftening
CLOSED: [2019-05-02 Thu 02:53]
:LOGBOOK:
- State "WONTDO"     from "TODO"       [2019-05-02 Thu 02:53] \\
  Didn't find any in the manual sample
- State "TODO"       from              [2019-05-02 Thu 02:52]
:END:
*** We can throw checked exceptions even on methods that don't declare them
*** With Exception softening
** WONTDO Mention on ~cast~ method
CLOSED: [2019-05-02 Thu 15:21]
:LOGBOOK:
- State "WONTDO"     from "TODO"       [2019-05-02 Thu 15:21] \\
  No data on cast method.
- State "TODO"       from              [2019-05-02 Thu 15:20]
:END:
*** https://lgtm.com/projects/g/mockito/mockito/snapshot/da68900466a17e21fef3e27690f4cef4b5c240ea/files/src/test/java/org/mockitoutil/SimpleSerializationUtil.java?sort=name&dir=ASC&mode=heatmap&showExcluded=false#L29
** WONTDO All captions above figures, e.g., table/listing/graphic
CLOSED: [2019-05-03 Fri 20:58]
:LOGBOOK:
- State "WONTDO"     from "TODO"       [2019-05-03 Fri 20:58] \\
  No time.
- State "TODO"       from              [2019-05-03 Fri 20:20]
:END:
*** When linking is not visible, annoying scroll needed
